@startuml
allowmixing 
'elementy class można zastąpic przez object

folder Model{
    class Czesc{
        {get/set} IdCzesc : int
        {get/set} IdUsterka : int
        {get/set} Nazwa : string
        {get/set} Cena : float
        {get/set} Numer : string
        {get/set} Zamowione : bool
        {get/set} Dostarczone : bool
        {get/set} Wymienione : bool

        +ZapiszCzesc() : void
        + {static} WczytajCzesci(int idUsterki) : ObservableCollection<Czesc>
        {static} WczytajCzesciZlecenia(int idZlecenia) : ObservableCollection<Czesc>
    }

    class Faktura{
        {get/private set} IdFaktura : int
        {get/private set} IdZlecenie : int
        {get/private set} DataWystawienie : DateTime
        {get/private set} Numer : int
        {get/private set} Koszty : Dictionary<string, float>
        {get/private set} Suma : float

        + {static} WczytajFakture(int idZlecenieNaprawy) : Faktura
        +OtworzFakture : void
    }

    class Klient{
        {get/set} IdKlient : int
        {get/set} NumerTeleefonu : string
    }

    class Mechanik{
        {get/set} IdMechanik : int
        {get/set} Imie : string
        {get/set} Nazwisko : string

        +ZapiszDane() : void
        + {static} WczytajMechanikow() : ObservableCollection<Mechanik>
        + {static} WyszukajMechanika(int idMechanik) : Mechanik
    }

    class Samochod{
        {get/set} IdSamochod : int
        {get/set} Marka : string
        {get/set} Model : string
        {get/set} Silnike : string
        {get/set} RokProdukcji : int
        {get/set} NumerRejestracyjny : string

        + ZapiszSamochod() : void
    }
    class Usterka{
        {get/set} IdUsterka : int
        {get/set} IdZlecenieNaprawy : int
        {get/set} IdMechanik : int
        {get/set} Opis : string
        {get/set} Naprawa : bool
        {get/set} Naprawione : bool
        {get/set} Koszt : float

        + ZapiszUsterke() : void
        + {static} WczytajUsterki(int idZlecenie) : ObservableCollection<Usterka>
    }
    class ZlecenieNaprawy{
        {get/set} IdZlecenie : int
        {get/set} IdKlient : int
        {get/set} IdSamochod : int
        {get/private set} DataPrzyjecia : DateTime
        {get/set} Naprawione : bool
        {get/set} ZgloszoneZakonczenieNapraw : bool
        {get/private set} DataOdbioru : DateTime
        {get/set} Zaplacone : bool
        {get/set} Odebrane : bool

        + ZapiszZlecenie() : void
    }

    folder Helpers{
        class FakturaConstructor{
            + WystawFakture(int idZlecenieNaprawy) : Faktura
            - PrzypiszKoszty(int idZlecenieNaprawy) : Dictionary<string, float>
        }
        class KlientConstrucktor{
            - _numerTelefonu : string
            - WyszukajKlienta() : Klient
            + ZnajdzIdKlienta() : int
            - ZdefiniujNowegoKlienta() : Klient
        }
        class SamochodConstructor{
            - _numerRejestracyjny : string
            - WyszukajSamochod() : Samochod
            + ZnajdzSamochod() : Samochod
            - ZdefiniujNowySamochod() : Samochod
        }
        class UsterkaWrapper{
            {get/set} Mechanik : Mechanik
            {get/set} Czesci : ObservableCollection<Czesc>
        }
        class ZlecenieNaprawyWrapper{
            {get/set} ZlecenieNaprawy : ZlecenieNaprawy
            {get/set} Samochod : Samochod
            + {static} WczytajZlecenia() : ObservableCollection<ZlecenieNaprawyWrapper>
        }
    }
}

folder Common{
    database BazaDanych{
    class BazaDanych{
        {static} ZleceniaNaprawy : ObservableCollection<ZlecenieNaprawy>
        {static} Mechanicy : ObservableCollection<Mechanik>
        {static} Klienci : ObservableCollection<Klient>
        {static} Samochody : ObservableCollection<Samochod>
        {static} Usterki : ObservableCollection<Usterka>
        {static} Faktury : ObservableCollection<Faktura>
        {static} Czesci : ObservableCollection<Czesc>
        {static} WczytajDaneZPlikow() : void
    }
    class ObslugaJSON{
        {static} PobierzDaneZJSON(string nazwaPliku) : ObservableCollection<T>
        {static} ZapiszDoJSON(IEnumerable<T> listaDanych, string nazwaPliku) : void
    }
    }
    class RelayCommand{
        {readonly} _execute Action<object>
        {readonly} _canExecute Predicate<object>
        + CanExecute(object parameter) : bool
        + EventHandler CanExecuteChanged : event
        + Execute(object parameter) : void
    }
    class Staticks{
        + {const} FolderDanych : string
        + {const} PlikCzesci : string
        + {const} PlikFaktur : string
        + {const} PlikKierownikow : string
        + {const} PlikKlientow : string
        + {const} PlikMechanikow : string
        + {const} PlikSamochodow : string
        + {const} PlikUsterek : string
        + {const} PlikZlecenNaprawy : string
        + {const} FolderFaktur : string
    }
}

folder Converters{
    class MechanikToNazwiskoImieConverter{
        Convert(object value, Type targetType, object parameter, CultureInfo culture) : object
        ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) : object
    }
    class ObjectToBoolConverter{
        Convert(object value, Type targetType, object parameter, CultureInfo culture) : object
        ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) : object
    }
    class SamochodToNazwaSamochoduConverter{
        Convert(object value, Type targetType, object parameter, CultureInfo culture) : object
        ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) : object
    }
}

folder View{
    class DodawanieMechanikaWindow
    class MainWindow
    class SzczegolyUsterkiWindow
    class SzczegolyZleceniaWindow
}

folder ViewModel{
    class DodawanieMechanikaViewModel
    class MainWindowViewModel
    class SzczegolyUsterkiViewModel
    class SzczegolyZleceniaViewModel
    class ViewModelBase
}

@enduml